psgannotations = readPSG("../../sleeprec-data/psg.annotations.patient1.csv",greydata)
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
setwd("vignettes/")
greydata = fread("../../sleeprec-data/grey.raw.patient1.csv",stringsAsFactors = F)
psgevents = fread("../../sleeprec-data/psg.events.patient1.csv",stringsAsFactors = F)
psgannotations = readPSG("../../sleeprec-data/psg.annotations.patient1.csv",greydata)
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
head(features)
source('~/INSIDE-DEM/X20170810-SleepRecognitionPSG-SL/Code/012-Rpackage/sleeprec/R/cv.R')
names = c("patient1","patient2")
fns = c("../../sleeprec-data/features.patient1.csv","../../sleeprec-data/features.patient2.csv")
features = readFeatures(fns,names)
readFeatures=function(filenames,pnames){
ret = do.call(lapply(1:length(filenames),function(i){
fn = filenames[i]
d = read.csv(fn)
d$PATIENT = pnames[i]
d
}))
}
features = readFeatures(fns,names)
readFeatures=function(filenames,pnames){
ret = do.call("rbind",lapply(1:length(filenames),function(i){
fn = filenames[i]
d = read.csv(fn)
d$PATIENT = pnames[i]
d
}))
}
features = readFeatures(fns,names)
readFeatures=function(filenames,pnames){
ret = do.call("rbind",lapply(1:length(filenames),function(i){
fn = filenames[i]
d = read.csv(fn,row.names = F)
d$PATIENT = pnames[i]
d
}))
}
features = readFeatures(fns,names)
readFeatures=function(filenames,pnames){
ret = do.call("rbind",lapply(1:length(filenames),function(i){
fn = filenames[i]
d = read.csv(fn)
d = d[,2:ncol(d)]
d$PATIENT = pnames[i]
d
}))
}
features = readFeatures(fns,names)
doClassification = function(features,feature="amean_f"){
setnames(features, old="groundtruth", new="label")
#only take annotated times
features=features[!is.na(features$label),]
#change labels to 0/1
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
#take the temperature stuff out
features=features[,!(colnames(features) %in% c("tempskin_f","tempref_f"))]
### get list of patients
patients=unique(features$PATIENT)
findices=c(3:(ncol(features)-2))
erg = do.call("rbind",lapply(1:length(findices),function(j){ #
print(j)
train=getTrain(features,findices[j])
label=getLabel(features,findices[j])
cole = lopocvComplete(function(xtrain,ytrain,xval){coleCV(xtrain,ytrain,xval)},train,label)
sadeh =lopocvComplete(function(xtrain,ytrain,xval){sadehCV(xtrain,ytrain,xval)},train,label)
lda = lopocvComplete(ldaCV,train,label)
logreg = lopocvComplete(logregCV,train,label)
hmm = lopocvComplete(hmmCV,train,label)
dd=data.frame(cole=cole$predict,sadeh=sadeh$predict,lda=lda$predict,logreg=logreg$predict,
hmm=hmm$predict,actual=cole$actual,subject=cole$subject,findex=findices[j],
fname=colnames(features)[findices[j]],time=features$time_f[!is.na(features[,findices[j]])])
}))
erg
}
classification = doClassification(features,"amean_f")
doClassification = function(features,feature="amean_f"){
setnames(features, old="groundtruth", new="label")
#only take annotated times
features=features[!is.na(features$label),]
#change labels to 0/1
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
#take the temperature stuff out
features=features[,!(colnames(features) %in% c("tempskin_f","tempref_f"))]
### get list of patients
patients=unique(features$PATIENT)
findices=c(3:(ncol(features)-2))
erg = do.call("rbind",lapply(1:length(findices),function(j){ #
print(j)
train=getTrain(features,findices[j],patients)
label=getLabel(features,findices[j],patients)
cole = lopocvComplete(function(xtrain,ytrain,xval){coleCV(xtrain,ytrain,xval)},train,label)
sadeh =lopocvComplete(function(xtrain,ytrain,xval){sadehCV(xtrain,ytrain,xval)},train,label)
lda = lopocvComplete(ldaCV,train,label)
logreg = lopocvComplete(logregCV,train,label)
hmm = lopocvComplete(hmmCV,train,label)
dd=data.frame(cole=cole$predict,sadeh=sadeh$predict,lda=lda$predict,logreg=logreg$predict,
hmm=hmm$predict,actual=cole$actual,subject=cole$subject,findex=findices[j],
fname=colnames(features)[findices[j]],time=features$time_f[!is.na(features[,findices[j]])])
}))
erg
}
classification = doClassification(features,"amean_f")
features = readFeatures(fns,names)
classification = doClassification(features,"amean_f")
classification = doClassification(features,"amean_f")
features = readFeatures(fns,names)
classification = doClassification(features,"amean_f")
source('~/INSIDE-DEM/X20170810-SleepRecognitionPSG-SL/Code/012-Rpackage/sleeprec/R/cv.R')
features = readFeatures(fns,names)
classification = doClassification(features,"amean_f")
classification = doClassification(features)
features = readFeatures(fns,names)
source('~/INSIDE-DEM/X20170810-SleepRecognitionPSG-SL/Code/012-Rpackage/sleeprec/R/cv.R')
classification = doClassification(features)
head(classification)
result = doCV(features)
features = readFeatures(fns,names)
result = doCV(features)
head(result)
plotExampleFit(features)
plotExampleFit=function(features){
#assume we have the features df
patients = unique(features$PATIENT)
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
sadeh = sadehCV(train,label,train)
lda = ldaCV(train,label,train)
logreg = logregCV(train,label,train)
hmm = hmmCV(train,label,train)
#put this in suitable data frame
df = data.frame(cole,sadeh,lda,logreg,hmm,label,t=1:length(cole),amean=train$V1)
v = melt(df,id.vars="t")
colnames(v) = c("Var1","Var2","value")
p=ggplot()+
geom_raster(data=subset(v,Var2=="label"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="lda"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="logreg"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="hmm"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="cole"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="sadeh"),aes(Var1,Var2,fill=factor(value)))+
geom_line(data=subset(v,Var2=="amean"),aes(Var1,value*20))+
facet_grid(Var2~.,scales="free_y",space="free_y")+
theme(strip.text.y = element_text(size = 8, angle = 0),axis.text.y=element_blank(),
axis.ticks = element_blank())+
theme(text=element_text(size=11, family="CM Roman"))+
theme(plot.margin=unit(c(0, 0, 0, 0),"cm"))+
labs(x = "",y = "",fill="Class")+
scale_fill_discrete(labels=c("Awake","Sleeping"))+
ggtitle(paste0("Patient ",patients[1],", train-on-test"))
p
}
plotExampleFit(features)
#assume we have the features df
patients = unique(features$PATIENT)
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
plotExampleFit=function(features){
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
patients = unique(features$PATIENT)
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
sadeh = sadehCV(train,label,train)
lda = ldaCV(train,label,train)
logreg = logregCV(train,label,train)
hmm = hmmCV(train,label,train)
#put this in suitable data frame
df = data.frame(cole,sadeh,lda,logreg,hmm,label,t=1:length(cole),amean=train$V1)
v = melt(df,id.vars="t")
colnames(v) = c("Var1","Var2","value")
p=ggplot()+
geom_raster(data=subset(v,Var2=="label"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="lda"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="logreg"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="hmm"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="cole"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="sadeh"),aes(Var1,Var2,fill=factor(value)))+
geom_line(data=subset(v,Var2=="amean"),aes(Var1,value*20))+
facet_grid(Var2~.,scales="free_y",space="free_y")+
theme(strip.text.y = element_text(size = 8, angle = 0),axis.text.y=element_blank(),
axis.ticks = element_blank())+
theme(text=element_text(size=11, family="CM Roman"))+
theme(plot.margin=unit(c(0, 0, 0, 0),"cm"))+
labs(x = "",y = "",fill="Class")+
scale_fill_discrete(labels=c("Awake","Sleeping"))+
ggtitle(paste0("Patient ",patients[1],", train-on-test"))
p
}
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
features = readFeatures(fns,names)
plotExampleFit(features)
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
patients = unique(features$PATIENT)
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
sadeh = sadehCV(train,label,train)
lda = ldaCV(train,label,train)
logreg = logregCV(train,label,train)
hmm = hmmCV(train,label,train)
head(features)
setnames(features, old="groundtruth", new="label")
l=rep(0,length(features$label))
l[features$label=="n1"|features$label=="n2"|features$label=="n3"|features$label=="n4"|
features$label=="rem"]=1
features$label=l
patients = unique(features$PATIENT)
train=data.frame(V1=features$amean_f[features$PATIENT==patients[1]])
label=features$label[features$PATIENT==patients[1]]
cole = coleCV(train,label,train)
sadeh = sadehCV(train,label,train)
lda = ldaCV(train,label,train)
logreg = logregCV(train,label,train)
hmm = hmmCV(train,label,train)
#put this in suitable data frame
df = data.frame(cole,sadeh,lda,logreg,hmm,label,t=1:length(cole),amean=train$V1)
v = melt(df,id.vars="t")
colnames(v) = c("Var1","Var2","value")
p=ggplot()+
geom_raster(data=subset(v,Var2=="label"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="lda"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="logreg"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="hmm"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="cole"),aes(Var1,Var2,fill=factor(value)))+
geom_raster(data=subset(v,Var2=="sadeh"),aes(Var1,Var2,fill=factor(value)))+
geom_line(data=subset(v,Var2=="amean"),aes(Var1,value*20))+
facet_grid(Var2~.,scales="free_y",space="free_y")+
theme(strip.text.y = element_text(size = 8, angle = 0),axis.text.y=element_blank(),
axis.ticks = element_blank())+
theme(text=element_text(size=11, family="CM Roman"))+
theme(plot.margin=unit(c(0, 0, 0, 0),"cm"))+
labs(x = "",y = "",fill="Class")+
scale_fill_discrete(labels=c("Awake","Sleeping"))+
ggtitle(paste0("Patient ",patients[1],", train-on-test"))
p
source('~/INSIDE-DEM/X20170810-SleepRecognitionPSG-SL/Code/012-Rpackage/sleeprec/R/cv.R')
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
features = readFeatures(fns,names)
plotExampleFit(features)
plotCvResults(result)
build_vignettes()
build_vignettes()
?revalue
build_vignettes()
library(plyr)
?setnames
build_vignettes()
options(warn=-1)
library(sleeprec)
options(warn=0)
library(sleeprec)
library(ggplot2)
library(knirt)
library(knitr)
build_vignettes()
build_vignettes()
devtools::build()
build_vignettes()
devtools::build()
build_vignettes()
install.packages("fansi")
devtools::build()
devtools::build()
devtools::build()
setwd("../..")
install.packages("sleeprec_0.1.0.tar.gz", repos = NULL, type="source")
library(sleeprec)
library(sleeprec)
library(data.table)
psgannotations = readPSG("sleeprec-data/psg.annotations.patient1.csv",greydata)
#load sample data
greydata = fread("sleeprec-data/grey.raw.patient1.csv",stringsAsFactors = F)
psgevents = fread("sleeprec-data/psg.events.patient1.csv",stringsAsFactors = F)
psgannotations = readPSG("sleeprec-data/psg.annotations.patient1.csv",greydata)
#feature extraction: takes some time...
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
#We can also load some pre-computed feature file if we do not want to wait so long
fns = c("../../sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
#We can also load some pre-computed feature file if we do not want to wait so long
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
#plot the results
plotExampleFit(features)
plotCvResults(result)
result = doCV(features)
plotCvResults(result)
#show the documentation for the package
vignette(sleeprec)
#show the documentation for the package
vignette("sleeprec")
#show the documentation for the package
vignette("sleeprec-tutorial")
library(sleeprec)
library(sleeprec)
library(data.table)
library(sleeprec)
library(sleeprec)
#we can also use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("sleeprec-data/algorithms.rds")
setwd("..")
#we can also use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("sleeprec-data/algorithms.rds")
feature = "amean_f"
alg = "hmm"
pretrainedClassification = applyPretrained(models,alg,feature,features)
features = readFeatures(fns,names)
#We can also load some pre-computed feature file if we do not want to wait so long
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
pretrainedClassification = applyPretrained(models,alg,feature,features)
plot(pretrainedClassification)
vignette("sleeprec-tutorial")
library(sleeprec)
vignette("sleeprec-tutorial")
#show the documentation for the package
vignette("sleeprec-tutorial")
setwd("sleeprec/")
#show the documentation for the package
vignette("sleeprec-tutorial")
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
library(sleeprec)
library(sleeprec)
??sleeprec
vignette("sleeprec-tutorial")
#load sample data
greydata = fread("sleeprec-data/grey.raw.patient1.csv",stringsAsFactors = F)
psgevents = fread("sleeprec-data/psg.events.patient1.csv",stringsAsFactors = F)
psgannotations = readPSG("sleeprec-data/psg.annotations.patient1.csv",greydata)
#feature extraction: takes some time...
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
#We can also load some pre-computed feature file if we do not want to wait so long
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
#do the classification (either getting the actual classification back, or the cross validation result)
classification = doClassification(features)
result = doCV(features)
library(sleeprec)
library(data.table)
#show the documentation for the package
vignette("sleeprec-tutorial")
#load sample data
greydata = fread("sleeprec-data/grey.raw.patient1.csv",stringsAsFactors = F)
setwd("..")
#load sample data
greydata = fread("sleeprec-data/grey.raw.patient1.csv",stringsAsFactors = F)
#feature extraction: takes some time...
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
psgevents = fread("sleeprec-data/psg.events.patient1.csv",stringsAsFactors = F)
psgannotations = readPSG("sleeprec-data/psg.annotations.patient1.csv",greydata)
#feature extraction: takes some time...
features = generateFeatures(greydata,psgevents,psgannotations,wsize=60)
features = readFeatures(fns,names)
result = doCV(features)
head(results)
head(result)
View(features)
vignette(sleeprec)
require(sleeprec)
library(sleeprec)
vignette("sleeprec-tutorial")
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
vignette("sleeprec")
fns = c("../../sleeprec-data/features.patient1.csv","../../sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
fns = c("../sleeprec-data/features.patient1.csv","./../sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
head(features)
table(features$groundtruth)
models = readRDS("sleeprec-data/algorithms.rds")#
models = readRDS("sleeprec-data/algorithms.rds")
models = readRDS("../sleeprec-data/algorithms.rds")
models$aq10_f
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
#We can also load some pre-computed feature file if we do not want to wait so long
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
setwd("..")
features = readFeatures(fns,names)
#do the classification (either getting the actual classification back, or the cross validation result)
classification = doClassification(features)
result = doCV(features)
View(result)
#we can also use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("sleeprec-data/algorithms.rds")
feature = "amean_f"
alg = "hmm"
pretrainedClassification = applyPretrained(models,alg,feature,features)
#plot the results
plotExampleFit(features)
plotCvResults(result)
library(sleeprec)
#plot the results
plotExampleFit(features)
#we can also use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("sleeprec-data/algorithms.rds")
feature = "amean_f"
alg = "hmm"
pretrainedClassification = applyPretrained(models,alg,feature,features)
?devtools::use_data
?use_data
use_data(models)
require(usethis)
use_data(models)
setwd("sleeprec/")
use_data(models)
require(usethis)
# use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("sleeprec-data/algorithms.rds")
# use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
models = readRDS("../sleeprec-data/algorithms.rds")
require(usethis)
use_data(models)
# load some pre-computed feature files
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
# load some pre-computed feature files
fns = c("sleeprec-data/features.patient1.csv","sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
# load some pre-computed feature files
fns = c("../sleeprec-data/features.patient1.csv","../sleeprec-data/features.patient2.csv")
names = c("patient1","patient2")
features = readFeatures(fns,names)
use_data(features)
library(sleeprec)
rm(list=ls())
# load some pre-computed feature files
invisible(features)
head(features)
# use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
feature = "amean_f"
alg = "hmm"
pretrainedClassification = applyPretrained(alg,feature,features)
library(sleeprec)
# use a pre-trained algorithm for classification. For this, we need to specify
#the algorithm (c("logreg","sadeh","lda","cole","hmm")) and feature (see colnames(features))
#for example:
feature = "amean_f"
alg = "hmm"
pretrainedClassification = applyPretrained(alg,feature,features)
table(pretrainedClassification)
#train and test using leave-one-subject-out cv (either getting the actual classification back, or the cross validation result)
classification = doClassification(features)
library(sleeprec)
devtools::build()
devtools::build()
setwd("..")
install.packages("sleeprec_0.1.0.tar.gz", repos = NULL, type="source")
library(sleeprec)
#show the documentation for the package
vignette("sleeprec-tutorial")
devtools::build()
setwd("sleeprec/")
devtools::build()
devtools::build()
